<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Holographic Photonic Cellular Automaton</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #000;
            color: #fff;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            overflow: hidden;
        }
        #canvas-container {
            position: relative;
            width: 600px;
            height: 600px;
            margin-bottom: 20px;
        }
        #holographic-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0.2;
        }
        #grid-canvas {
            position: absolute;
            top: 0;
            left: 0;
        }
        .controls {
            margin-bottom: 20px;
        }
        button {
            margin: 0 10px;
            padding: 5px 10px;
        }
        #explanation {
            max-width: 600px;
            text-align: justify;
        }
    </style>
</head>
<body>
    <h1>Holographic Photonic Cellular Automaton</h1>
    <div id="canvas-container">
        <canvas id="holographic-background"></canvas>
        <canvas id="grid-canvas"></canvas>
    </div>
    <div class="controls">
        <button id="start">Start</button>
        <button id="stop">Stop</button>
        <button id="reset">Reset</button>
    </div>
    <div id="explanation">
        <h2>Axioms and Their Effects:</h2>
        <p>☼/☾ (Day/Night Cycle): Cells alternate between active and dormant states.</p>
        <p>■~□ (Solid/Empty): Determines the presence or absence of energy in a cell.</p>
        <p>↑↓→ (Movement): Influences the direction of energy transfer between cells.</p>
        <p>◊/◊ (Interaction): Governs how neighboring cells affect each other.</p>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.7/dat.gui.min.js"></script>
    <script>
        const gridSize = 20;
        const cellSize = 30;
        const canvasSize = gridSize * cellSize;
        
        const gridCanvas = document.getElementById('grid-canvas');
        const ctx = gridCanvas.getContext('2d');
        gridCanvas.width = canvasSize;
        gridCanvas.height = canvasSize;

        const bgCanvas = document.getElementById('holographic-background');
        const bgCtx = bgCanvas.getContext('2d');
        bgCanvas.width = canvasSize;
        bgCanvas.height = canvasSize;

        let cells = [];
        let intervalId = null;

        const axiomColors = ['#FFD700', '#00CED1', '#FF69B4', '#32CD32'];
        const axiomSymbols = ['☼/☾', '■~□', '↑↓→', '◊/◊'];

        // Initialize the grid
        function initializeGrid() {
            cells = [];
            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    cells.push({
                        x: j * cellSize,
                        y: i * cellSize,
                        state: Math.random() > 0.5 ? 1 : 0,
                        axiom: Math.floor(Math.random() * 4)
                    });
                }
            }
            drawHolographicBackground();
            updateGrid();
        }

        // Draw holographic background
        function drawHolographicBackground() {
            const gradient = bgCtx.createLinearGradient(0, 0, canvasSize, canvasSize);
            gradient.addColorStop(0, 'rgba(0, 100, 200, 0.2)');
            gradient.addColorStop(1, 'rgba(200, 0, 100, 0.2)');
            bgCtx.fillStyle = gradient;
            bgCtx.fillRect(0, 0, canvasSize, canvasSize);

            for (let i = 0; i < 100; i++) {
                bgCtx.beginPath();
                bgCtx.arc(
                    Math.random() * canvasSize,
                    Math.random() * canvasSize,
                    Math.random() * 3,
                    0,
                    Math.PI * 2
                );
                bgCtx.fillStyle = 'rgba(255, 255, 255, 0.5)';
                bgCtx.fill();
            }
        }

        // Update the visual representation of the grid
        function updateGrid() {
            ctx.clearRect(0, 0, canvasSize, canvasSize);
            cells.forEach(cell => {
                const hue = cell.state * 60;
                const lightness = 50 + cell.state * 50;
                ctx.fillStyle = `hsl(${hue}, 100%, ${lightness}%)`;
                ctx.fillRect(cell.x, cell.y, cellSize, cellSize);

                ctx.fillStyle = axiomColors[cell.axiom];
                ctx.font = '20px Arial';
                ctx.fillText(axiomSymbols[cell.axiom], cell.x + 5, cell.y + 20);

                // Draw ESP-like connections
                if (Math.random() > 0.7) {
                    const targetCell = cells[Math.floor(Math.random() * cells.length)];
                    ctx.beginPath();
                    ctx.moveTo(cell.x + cellSize / 2, cell.y + cellSize / 2);
                    ctx.lineTo(targetCell.x + cellSize / 2, targetCell.y + cellSize / 2);
                    ctx.strokeStyle = `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.3)`;
                    ctx.stroke();

                    // Draw arrow
                    const angle = Math.atan2(targetCell.y - cell.y, targetCell.x - cell.x);
                    ctx.save();
                    ctx.translate(targetCell.x + cellSize / 2, targetCell.y + cellSize / 2);
                    ctx.rotate(angle);
                    ctx.beginPath();
                    ctx.moveTo(0, 0);
                    ctx.lineTo(-10, -5);
                    ctx.lineTo(-10, 5);
                    ctx.closePath();
                    ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';
                    ctx.fill();
                    ctx.restore();
                }
            });
        }

        // Apply cellular automaton rules based on axioms
        function applyRules() {
            const newStates = cells.map((cell, index) => {
                const neighbors = getNeighbors(index);
                const activeNeighbors = neighbors.filter(n => n.state === 1).length;

                switch (cell.axiom) {
                    case 0: // ☼/☾ Day/Night Cycle
                        return activeNeighbors === 2 || activeNeighbors === 3 ? 1 : 0;
                    case 1: // ■~□ Solid/Empty
                        return activeNeighbors > 4 ? 1 : 0;
                    case 2: // ↑↓→ Movement
                        return (cell.state + activeNeighbors) % 2;
                    case 3: // ◊/◊ Interaction
                        return activeNeighbors === 3 ? 1 : 0;
                    default:
                        return cell.state;
                }
            });

            cells.forEach((cell, index) => {
                cell.state = newStates[index];
            });
        }

        // Get the neighboring cells for a given index
        function getNeighbors(index) {
            const neighbors = [];
            const row = Math.floor(index / gridSize);
            const col = index % gridSize;

            for (let i = -1; i <= 1; i++) {
                for (let j = -1; j <= 1; j++) {
                    if (i === 0 && j === 0) continue;
                    const newRow = row + i;
                    const newCol = col + j;
                    if (newRow >= 0 && newRow < gridSize && newCol >= 0 && newCol < gridSize) {
                        neighbors.push(cells[newRow * gridSize + newCol]);
                    }
                }
            }

            return neighbors;
        }

        // Start the simulation
        function startSimulation() {
            if (!intervalId) {
                intervalId = setInterval(() => {
                    applyRules();
                    updateGrid();
                }, 500);
            }
        }

        // Stop the simulation
        function stopSimulation() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        }

        // Event listeners for controls
        document.getElementById('start').addEventListener('click', startSimulation);
        document.getElementById('stop').addEventListener('click', stopSimulation);
        document.getElementById('reset').addEventListener('click', initializeGrid);

        // Initialize the grid on page load
        initializeGrid();

        // dat.GUI controls
        const gui = new dat.GUI();
        const params = {
            gridSize: gridSize,
            cellSize: cellSize,
            updateInterval: 500
        };

        gui.add(params, 'gridSize', 10, 50).step(1).onChange(value => {
            gridSize = value;
            initializeGrid();
        });
        gui.add(params, 'cellSize', 10, 50).step(1).onChange(value => {
            cellSize = value;
            initializeGrid();
        });
        gui.add(params, 'updateInterval', 100, 1000).step(50).onChange(value => {
            if (intervalId) {
                stopSimulation();
                startSimulation();
            }
        });
    </script>
</body>
</html>
